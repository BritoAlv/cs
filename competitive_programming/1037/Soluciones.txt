A : de los digitos coger el menor, pues se busca el menor entero no negativo.

B : zeros consecutivos 1, zeros_consecutivos, 1, ...., zeros_consecutivos, dividir entre (k+1) los ceros consecutivos. como una expresion regular de la forma 0* 1 0* 1 ... 0*

C : moverse a la menor de mayor altura es optimo, y es la unica opcion.

D : 

Una moneda es alcanzable si con una secuencia de pasos empezando en k se puede obtener.

Como las monedas alcanzables cumplen que ri >= real_i >= li, 

la unica forma de alcanzar una moneda i, es a partir de una moneda j tal que (lj, rj) < (li, ri) || li <= k <= ri.

Si itero por los segmentos ordenados por (li, ri) ese grafo solamente tiene aristas a la derecha. es un topological sort.

No obstante puede tener una cantidad cuadratica de aristas, lo que no permite hacer dp, aqui es donde entra el greedy, de cada segmento entre sus aristas solamente es necesaria la que desbloquea la mayor moneda.

supon que con a monedas, se desbloquean b monedas y B monedas, B > b, si con b monedas se desbloquea c > B entonces: 

lj <= b <= rj ( desbloquea c > B)

si con B no se puede desbloquear a c es porque either B < lj || B > rj.

Si B < lj, entonces b < B < lj absurdo. Si B > rj entones B > c absurdo.

Esto demuestra que el outdegree de cada vertice es a lo mas 1, lo que permite resolver el problema no en tiempo cuadratico.

E : Voy a demostrar que si hay solucion entonces el array A = mcm(p[i], s[i]) tiene que ser un array que da lugar a los array p, s cumpliendo la condicion.

Si hay un array A entonces se tiene que cumplir que p[i+1] | p[i], s[i-1] | s[i], ademas de que es necesario que mcm(p[i], s[i]) divida a A[i].

p[n-1] = s[n-1] = g = mcd(A), dividir todos los elementos por g, pues esto no afecta, si hay solucion o no.

mcd(A) = 1, ahora. Si A[i] = mcm(p[i], s[i]) * k

mcm(p[i], s[i]) = 1, porque eso incluye todo el array y mcd(A) = 1.

Se tiene que cumplir que: 
	  mcd(p[i-1] , A[i]) = p[i]
	= mcd(t * p[i], p[i] * s[i] * k)
esto implica que: mcd(t, s[i] * k) = 1

s[i] es coprimo con p[i-1], porque cubren todo el array, como t es un divisor de p[i-1], quedaria que:
	mcd(t, k) = 1
	
k = 1 cumple la condicion y garantiza entonces que mcd(p[i-1], A[i]) = p[i], analogamente sucede con mcd(s[i+1], A[i]) = s[i].

Esto lo que demuestra es que si hay un array A solucion entonces el definido por A[i] = mcm(p[i], s[i]) es solucion. 

Si el array A da solucion, yes else no hay solucion porque si la hubiera el tiene que serlo.

F : Hacer un bfs para orientar las aristas en un arbol, cada padre aporta las aristas diferentes con sus hijos, se agrupan sus hijos por color, y se lleva la suma en una variable, actualizar el color de un hijo es decirle a su padre, que cambie la suma de los adyacentes del nuevo color por el viejo, y a el actualizarle su color, y lo que cambia en su suma, con sus hijos. 

G1 : Si se fija la mediana un valor del array entre 1 y 100, es equivalente a hacer un array de -1, 1 donde -1 significa < mediana, 1 >= que mediana, y encontrar todos los subarrays que sumen either 0 o +1.

Observar que si solamente fuera 0 seria hallar la cadena balanceada mas larga del array.

Eso se puede lograr con suma de los prefijos, pues sum[l, r] = 0, implica que: sum[0, l-1] == sum[0, r]. 

Para cada suma posible (de -n a n) a lo mas 2n+1 posibles valores, guardar el mayor indice que da esa suma.

Entonces iterar por cada indice l, su correspondiente suma es p[l-1], el mayor indice r tal que p[r] == p[l-1], es uno de los subarrays que estamos buscando, como mismo el mayor indice tal que p[r] == p[l-1] + 1. Asumiendo que r >= l.
