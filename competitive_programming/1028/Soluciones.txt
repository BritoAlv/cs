A : Si el menor de (a, c) es mayor o igual que el menor de (b, d) entonces le puede ganar.

No tiene sentido atacar al otro ambas vida e espadachin, solamente a uno solo, pues cuando uno de los dos se acaba ese jugador no puede hacer mas nada. En este caso (a, c) = min(a, c) son objetivos, y es como si fueran un solo numero, el que tenga el mayor gana.

El lado mas debil de cada uno es min(a, c) vs min(b, d) el que tenga el mayor gana, si son iguales gana el que empieza.

B : 2^k, es alcanzable solo por dos potencias de 2, (k-1), (k-1) esto reduce la busqueda del maximo a el mayor valor visto hasta la posicion i, en cada uno de los dos arrays. 

O sea el maximo ri, usa al maximo de el array A, o el maximo del array Q, hasta la posicion i.

C : Como la operacion afecta a un solo numero, el mcd final es el de todo el array, entonces si esta presente inicialmente, la respuesta es la cantidad de numeros que no son iguales a el.

En otro caso es n-1 + la menor cantidad de operaciones para hacer que ese sea el valor de un elemento del array.

Eso se puede hacer por dp, en cada iteracion guardar el menor costo de lograr un mcd fijado, cuando se revisa un numero nuevo, para cada uno de los mcd actualizar.

La complejidad de eso es O(n * max(a) * log (n))

Porque la dp es cuadratica y hace falta un set para ir guardando los mcd, si la dp se hace linear, entonces el costo es cuadratico por cada caso de prueba, que no es eficiente.

La complejidad anterior esta mal, pues calcular el mcd de dos numeros es cuadratico. Por lo que la complejidad se aumenta en calcular el mcd de todos los pares ai, aj. 

EL truco es pre-computar eso para que la solucion entre en tiempo.
